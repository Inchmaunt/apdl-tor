/PREP7  
 
ET,1,PLANE182   

KEYOPT,1,1,0
KEYOPT,1,3,1
KEYOPT,1,6,0

!*  
!*  
MPTEMP,,,,,,,,  
MPTEMP,1,0  
MPDATA,EX,1,,2e11   
MPDATA,PRXY,1,,0.3  
MPTEMP,,,,,,,,  
MPTEMP,1,0  
MPDATA,DENS,1,,7800 

!LOCAL,11,1,10,0,0, , , ,1,1,
!==================================================перечитать задачу==============================
/PREP7
LSCLEAR,ALL 
ACLEAR,1
ADELE, ALL
LDELE,All
KDELE,All
CSYS,0 
!дано
h=0.15 !толщина

R2=5 !наружный радиус сечерия тора

r1=R2-h !внутренний радиус сечерия тора

b=2*R2 !радиус окружности тора

pr=2 !давление

elemcount=6 !число разбиений сетки
elemcount2=elemcount !
nodecount=elemcount+1

Pi=ACOS(-1)  !число пи

tn = 1000 !техническое число

tn2 = 2000 !техническое число 2


!массивы для задачи
*DIM, lowcXcyl, array, elemcount+1, 3
*DIM, lowcxstress, array, elemcount+1, 1
*DIM, highcXcyl, array, elemcount+1, 3
*DIM, lowcxcorrosion, array, elemcount+1, 3
*DIM, lownodestress, array, elemcount+1, 7

*DO, i, 0, elemcount,1
lowcXcyl(i+1,1,1) = Pi/elemcount*i
lowcXcyl(i+1,2,1) = b+(R2-h)*COS(Pi/elemcount*i)
lowcXcyl(i+1,3,1) = (R2-h)*SIN( Pi/elemcount*i)
K,i+1,lowcXcyl(i+1,2,1),lowcXcyl(i+1,3,1),0,
*ENDDO
 
 
nn = (elemcount+1) !выбанное число точек сплайна
splnn = nn !число точек
spl = 1
*DIM, jnset, array,  elemcount+1, 8
*DIM, jset, array, elemcount+1, nn*2
*DIM, jxset, array, elemcount+1, nn*2
*DIM, jyset, array, elemcount+1, nn*2
*DIM, newcoordset, array, elemcount+1, 2
 


!  !===============Узловой вектор ===============
! kk = 2 !степень     k
! n_v = elemcount ! число прямых участков n
! vecleng = kk + n_v + 1 ! длина узлового вектора
! *DIM, opennodevector, array, vecleng, 1

! *DO, i, 1, vecleng, 1 
!     *IF, i, LE, kk, AND, i, GE, 1, THEN ! участок под нули
!     opennodevector(i,1,1) = 0
!     *ELSE
!     *ENDIF

!     *IF, i, LE, n_v + 1, AND, i, GE, kk + 1, THEN ! участок под счет
!     opennodevector(i,1,1) = i-kk
!     *ELSE
!     *ENDIF

!      *IF, i, LE, vecleng, AND, i, GE, n_v + 2, THEN ! участок под финал
!     opennodevector(i,1,1) = n_v - kk + 2
!     *ELSE
!     *ENDIF
! *ENDDO


 !=============== Новый узловой вектор ===============
kk = 2 !степень k
n_v = elemcount + 1 ! число прямых участков n (число точек!!!)
vecleng = kk + n_v! длина узлового вектора
hh = 1 ! Вес кривой


*DIM, opennodevector, array, vecleng, 1
*DIM, horda_c, array, elemcount+1, 4

*DO, i, 1, elemcount,1
horda_c(i+1,1,1) = lowcXcyl(i+1,2,1)-lowcXcyl(i,2,1)
horda_c(i+1,2,1) = lowcXcyl(i+1,3,1)-lowcXcyl(i,3,1)
horda_c(i+1,3,1) = (horda_c(i+1,1,1)**2 + horda_c(i+1,2,1)**2)**0.5
horda_c(i+1,4,1) = horda_c(i+1,3,1) + horda_c(i,4,1)
*ENDDO

*DO, i, 1, vecleng, 1 
    *IF, i, LE, kk, AND, i, GE, 1, THEN ! участок под нули
    opennodevector(i,1,1) = 0
    *ELSE
    *ENDIF

    *IF, i, LE, n_v - kk + 1, AND, i, GE, 1, THEN ! участок под счет
    opennodevector(i+kk,1,1) = (((i/(n_v-kk+2))*horda_c(i+1,3,1) + horda_c(i+1,4,1))/horda_c(elemcount+1,4,1))*(n_v-kk+2)
    *ELSE
    *ENDIF

     *IF, i, LE, vecleng, AND, i, GE, n_v + 1, THEN ! участок под финал
    opennodevector(i,1,1) = n_v - kk + 2
    *ELSE
    *ENDIF
*ENDDO

! ! !=============== Функции базиса N ===============

! *DIM, basis_n, array, elemcount, kk*elemcount
! tt = opennodevector(1+kk,1,1)-opennodevector(kk,1,1)
! ttt = opennodevector(kk,1,1)

! *DO, i, 1, elemcount, 1 
! 	*IF, tt, LT, opennodevector(i+1,1,1), AND, tt, GE, opennodevector(i,1,1), THEN
! 	basis_n(i,1,1) = 1
! 	*ELSE
! 	basis_n(i,1,1) = 0
! 	*ENDIF
! *ENDDO

! *DO, i, 1, elemcount, 1
! 	*DO, j, 1+1, kk, 1
! 		*IF, opennodevector(i+j,1,1)-opennodevector(i,1,1), EQ, 0, OR, opennodevector(i+j,1,1) - opennodevector(i+1,1,1), EQ, 0, THEN
! 		basis_n(i,j,1) = 0
! 		*ELSE
! 		basis_n(i,j,1)=(basis_n(i,j-1,1)*(ttt-opennodevector(i,1,1)) / (opennodevector(i+j,1,1)-opennodevector(i,1,1))) +((((opennodevector(i+j,1,1)-ttt))*basis_n(i+1,j-1,1)) / (opennodevector(i+j,1,1) - opennodevector(i+1,1,1)))
! 	*ENDDO
! *ENDDO


!=============== Функции базиса N цикл  ===============

!зафиксировать два значения в узловом векторе, и потом пробегать по ним всеми остальными значениями

*DIM, basis_n, array, vecleng, kk*vecleng
!basis_n(vecleng-1, n_v,1)=1

*DO, mm, 1, vecleng-1, 1
	tt = opennodevector(mm,1,1)
	*DO, i, 1, vecleng, 1 
		*IF, tt, LT, opennodevector(mm+1,1,1), AND,  tt, GE, opennodevector(mm,1,1), THEN
		basis_n(mm,mm,1) = 1
		*ELSE
		basis_n(mm,mm,1) = 0
		*ENDIF
	*ENDDO
*ENDDO



! *DO, mm, 1, vecleng, 1
!     tt = opennodevector(mm,1,1)
!         *DO, i, 1, vecleng-1, 1 
!         *IF, tt, LT, opennodevector(i+1,1,1), AND,  tt, GE, opennodevector(i,1,1), THEN
!             basis_n(i,mm,1) = 1
!         *ELSE
!             basis_n(i,mm,1) = 0
!         *ENDIF
!     *ENDDO
! *ENDDO



*DO, j, vecleng+1, kk*vecleng, 1
	*DO, i, 2, vecleng-kk, 1
		
		ttt=opennodevector(i,1,1)

		*IF, opennodevector(i+kk-1-1,1,1)-opennodevector(i-1,1,1), EQ, 0, THEN
		basis_n(i,j,1) = ((opennodevector(i+kk-1,1,1)-ttt)*basis_n(i,j-vecleng+1,1)) / (opennodevector(i+kk-1,1,1) - opennodevector(i+1-1,1,1))

		*ELSEIF, opennodevector(i+kk-1,1,1)-opennodevector(i+1-1,1,1), EQ, 0
		basis_n(i,j,1) = basis_n(i,j-vecleng,1)*(ttt-opennodevector(i-1,1,1)) / (opennodevector(i+kk-1-1,1,1)-opennodevector(i-1,1,1))
	
		*ELSEIF, opennodevector(i+kk-1-1,1,1)-opennodevector(i-1,1,1), EQ, 0, AND, opennodevector(i+kk-1,1,1)-opennodevector(i+1-1,1,1), EQ, 0
		basis_n(i,j,1) = 0
		
		*ELSE
		basis_n(i,j,1) = (basis_n(i,j-vecleng,1)*(ttt-opennodevector(i-1,1,1)) / (opennodevector(i+kk-1-1,1,1)-opennodevector(i-1,1,1))) + ((((opennodevector(i+kk-1,1,1)-ttt))*basis_n(i,j-vecleng+1,1)) / (opennodevector(i+kk-1,1,1) - opennodevector(i+1-1,1,1)))
		
		*ENDIF
	*ENDDO
*ENDDO


! *DO, j, vecleng+1, kk*vecleng, 1
! 	*DO, i, 1, vecleng-kk, 1
! 		ttt=opennodevector(kk+i-1,1,1)
! 		*IF, opennodevector(i+kk-1,1,1)-opennodevector(i,1,1), EQ, 0, OR, opennodevector(i+kk,1,1)-opennodevector(i+1,1,1), EQ, 0, THEN
! 		basis_n(i,j,1) = 0
! 		*ELSE
! 		basis_n(i,j,1) = (basis_n(i,j-vecleng+1,1)*(ttt-opennodevector(i,1,1)) / (opennodevector(i+kk-1,1,1)-opennodevector(i,1,1))) + ((((opennodevector(i+kk,1,1)-ttt))*basis_n(i+1,j-vecleng+1,1)) / (opennodevector(i+kk,1,1) - opennodevector(i+1,1,1)))
! 		*ENDIF
! 	*ENDDO
! *ENDDO



	
!=============== Весовой вектор h  ===============

*DIM, VECTOR_H, ARRAY,1, ELEMCOUNT+1
*DO,i, 1, ELEMCOUNT+1,1
	*IF, i, EQ, (ELEMCOUNT/2)+1, THEN
	VECTOR_H(1,i,1)=hh
	*ELSE
	VECTOR_H(1,i,1)=1
	*ENDIF
*ENDDO

!=============== Умножение весового вектора h на компонент базиса N и суммирование ===============

*DIM, Sn, ARRAY, elemcount, elemcount
*DO, j, 1, elemcount, 1	
	*DO, i, 1, elemcount, 1
		Sn(i,j,1) = VECTOR_H(1,j,1)*basis_n(i,(kk-1)*elemcount+j,1) 
	*ENDDO
*ENDDO


*DIM, SnSUM, ARRAY, elemcount, elemcount
*DO, j, 1, elemcount-1, 1	
	*DO, i, 1, elemcount, 1
		SnSUM(i,j+1,1) = SnSUM(i,j,1)+Sn(i,j+1,1)
	*ENDDO
*ENDDO

!=============== Компоненты вектора R ===============
*DIM, Rv, ARRAY, elemcount, elemcount
*DO, j, 1, elemcount, 1	
	*DO, i, 2, elemcount-kk, 1
		RV(i,j,1) = Sn(i,j,1) / SnSUM(i,elemcount,1)
	*ENDDO
*ENDDO
!=============== Точки ===============
*DIM, nurbsX, array, vecleng, elemcount
*DIM, nurbsY, array, vecleng, elemcount
*DIM, nurbsXsum, array, vecleng, elemcount
*DIM, nurbsYsum, array, vecleng, elemcount
*DO, j, 1, elemcount, 1	
	*Do,i, 1,elemcount, 1
		nurbsX(i,j,1) = RV(j,i,1)*lowcXcyl(i,2,1)
		nurbsY(i,j,1) = RV(j,i,1)*lowcXcyl(i,3,1)
	*ENDDO
*ENDDO

*DO, j, 1, elemcount, 1	
	*Do,i, 1,elemcount, 1
		nurbsXsum(i+1,j,1) = nurbsX(i+1,j,1)+nurbsXsum(i,j,1)
		nurbsYsum(i+1,j,1) = nurbsY(i+1,j,1)+nurbsYsum(i,j,1)
	*ENDDO
	K,j+8000,nurbsXsum(elemcount+1,j,1),nurbsYsum(elemcount+1,j,1),0,
*ENDDO
